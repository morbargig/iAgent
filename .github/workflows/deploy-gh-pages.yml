name: üöÄ Deploy to GitHub Pages

on:
  # Deploy on push to main branch (after CI passes)
  push:
    branches: [main]

  # Allow manual deployment
  workflow_dispatch:

# Ensure only one deployment runs at a time
concurrency:
  group: gh-pages-deployment
  cancel-in-progress: false

env:
  NODE_VERSION: "20"
  # GitHub Pages configuration
  BASE_URL: "/iAgent/"
  # Disable Nx Cloud completely
  NX_CLOUD_DISTRIBUTED_EXECUTION: "false"
  NX_CLOUD_NO_ACCESS: "true"
  NX_SKIP_CLOUD_CACHE: "true"

jobs:
  deploy:
    name: üöÄ Deploy Frontend to GitHub Pages
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # Required permissions for GitHub Pages deployment
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîß Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: üì¶ Install dependencies
        run: npm ci --prefer-offline --no-audit --production=false

      - name: üîç Cache Nx computation cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-

      - name: üèóÔ∏è Build frontend for production
        run: npx nx build @iagent/frontend --configuration=production --no-cloud
        env:
          # GitHub Pages specific environment variables
          VITE_BASE_URL: ${{ env.BASE_URL }}
          VITE_API_BASE_URL: https://iagent-1-jzyj.onrender.com/api
          VITE_BASE_API_URL: https://iagent-1-jzyj.onrender.com/api
          VITE_ENVIRONMENT: production
          NODE_ENV: production
          NX_CLOUD_DISTRIBUTED_EXECUTION: "false"
          NX_SKIP_CLOUD_CACHE: "true"
          NX_CLOUD_NO_ACCESS: "true"

      - name: üìä Verify build output
        run: |
          echo "üìä Build verification:"
          echo "üìÅ Build directory: dist/apps/frontend"
          echo "üìè Total size: $(du -sh dist/apps/frontend)"

          # Check if required files exist
          if [[ -f "dist/apps/frontend/index.html" ]]; then
            echo "‚úÖ index.html exists"
          else
            echo "‚ùå index.html missing"
            exit 1
          fi

          # List main files
          echo "üìÑ Main files:"
          ls -la dist/apps/frontend

      - name: üîß Prepare deployment files
        run: |
          cd dist/apps/frontend

          # Create .nojekyll to bypass Jekyll processing
          touch .nojekyll

          # Create robots.txt for SEO
          cat > robots.txt << EOF
          User-agent: *
          Allow: /
          Sitemap: https://${{ github.repository_owner }}.github.io${{ env.BASE_URL }}sitemap.xml
          EOF

          # Create a simple 404 page that redirects to index
          cat > 404.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Redirecting...</title>
            <script>
              // Redirect to index.html for SPA routing
              window.location.href = '/iAgent/';
            </script>
          </head>
          <body>
            <p>Redirecting to <a href="/iAgent/">iAgent</a>...</p>
          </body>
          </html>
          EOF

          echo "‚úÖ Deployment files prepared"

      - name: üöÄ Deploy to GitHub Pages
        id: deployment
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist/apps/frontend
          # Do not set CNAME as we want the default GitHub Pages URL

      - name: üìã Deployment summary
        run: |
          echo "üìã Deployment Summary:"
          echo "‚úÖ Frontend deployed successfully!"
          echo "üåê URL: https://${{ github.repository_owner }}.github.io/iAgent/"
          echo "üìä Build size: $(du -sh dist/apps/frontend)"
          echo "üïê Deployed at: $(date)"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üë§ Triggered by: ${{ github.actor }}"

      - name: üåê Verify deployment
        run: |
          echo "üåê Verifying deployment accessibility..."
          DEPLOYMENT_URL="https://${{ github.repository_owner }}.github.io/iAgent/"

          # Wait for deployment to propagate
          echo "‚è≥ Waiting 30 seconds for deployment to propagate..."
          sleep 30

          # Test basic connectivity
          if curl -sL --fail "$DEPLOYMENT_URL" > /dev/null; then
            echo "‚úÖ Deployment is accessible!"
            echo "üéâ Visit your app at: $DEPLOYMENT_URL"
          else
            echo "‚ö†Ô∏è Deployment verification inconclusive"
            echo "üåê Please check manually: $DEPLOYMENT_URL"
            echo "‚ÑπÔ∏è It may take a few minutes for GitHub Pages to update"
          fi
